rm(list=ls())
base.dir <- '~/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- './github/alignment/data/'
## nextstrain data files. I cloned Trevor's repo to get up to date files
ns.meta.f <- './nextstrain/ncov/data/metadata.tsv'
ns.exclude.f <- './nextstrain/ncov/config/exclude.txt'
# nextstrain's metadata file
ns.meta.data <- read.delim(ns.meta.f, header=T, sep='\t')
# nextstrain's exclude file
ns.exclude.f <- './nextstrain/ncov/config/exclude.txt'
system(paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt'))
paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt')
rm(list=ls())
base.dir <- '~/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- './github/alignment/data/'
## nextstrain data files. I cloned Trevor's repo to get up to date files
ns.meta.f <- './nextstrain/ncov/data/metadata.tsv'
ns.exclude.f <- './nextstrain/ncov/config/exclude.txt'
# nextstrain's metadata file
ns.meta.data <- read.delim(ns.meta.f, header=T, sep='\t')
# nextstrain's exclude file
ns.exclude.f <- './nextstrain/ncov/config/exclude.txt'
system(paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt'))
save.dir <- paste(base.dir, 'github/alignment/data/', sep='')
rm(list=ls())
base.dir <- '~/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- paste(base.dir, 'github/alignment/data/', sep='')
## nextstrain data files. I cloned Trevor's repo to get up to date files
ns.meta.f <- paste(base.dir, 'nextstrain/ncov/data/metadata.tsv', sep='')
ns.exclude.f <- paste(base.dir, 'nextstrain/ncov/config/exclude.txt', sep='')
# nextstrain's metadata file
ns.meta.data <- read.delim(ns.meta.f, header=T, sep='\t')
# nextstrain's exclude file
ns.exclude.f <- './nextstrain/ncov/config/exclude.txt'
system(paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt'))
paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt')
rm(list=ls())
base.dir <- '~/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- paste(base.dir, 'github/alignment/data/', sep='')
## nextstrain data files. I cloned Trevor's repo to get up to date files
ns.meta.f <- paste(base.dir, 'nextstrain/ncov/data/metadata.tsv', sep='')
ns.exclude.f <- paste(base.dir, 'nextstrain/ncov/config/exclude.txt', sep='')
# nextstrain's metadata file
ns.meta.data <- read.delim(ns.meta.f, header=T, sep='\t')
# nextstrain's exclude file
system(paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt'))
rm(list=ls())
base.dir <- '/Users/jaehee/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- paste(base.dir, 'github/alignment/data/', sep='')
## nextstrain data files. I cloned Trevor's repo to get up to date files
ns.meta.f <- paste(base.dir, 'nextstrain/ncov/data/metadata.tsv', sep='')
ns.exclude.f <- paste(base.dir, 'nextstrain/ncov/config/exclude.txt', sep='')
# nextstrain's metadata file
ns.meta.data <- read.delim(ns.meta.f, header=T, sep='\t')
# nextstrain's exclude file
system(paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt'))
paste("sed '/#/d; /^$/d", ns.exclude.f, ">", save.dir, 'exclude_ns.txt')
# nextstrain's exclude file
system(paste("sed '/#/d; /^$/d'", ns.exclude.f, ">", save.dir, 'exclude_ns.txt'))
rm(list=ls())
base.dir <- '/Users/jaehee/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- './github/alignment/data/'
## nextstrain data files. I cloned Trevor's repo to get up to date files
ns.meta.f <- './nextstrain/ncov/data/metadata.tsv'
ns.exclude.f <- './nextstrain/ncov/config/exclude.txt'
# nextstrain's metadata file
ns.meta.data <- read.delim(ns.meta.f, header=T, sep='\t')
# nextstrain's exclude file
system(paste("sed '/#/d; /^$/d' ", ns.exclude.f, " > ",
save.dir, 'exclude_ns.txt', sep=''))
rm(list=ls())
base.dir <- '/Users/jaehee/Desktop/Coronavirus/'
setwd(base.dir)
save.dir <- './github/alignment/data/'
ns.dir <- './nextstrain/ncov/' #nextstrain cloned repo
# nextstrain's metadata file
ns.meta.data <- read.delim(paste(ns.dir, 'data/metadata.tsv', sep=''),
header=T, sep='\t')
# nextstrain's exclude file
system(paste("sed '/#/d; /^$/d' ", ns.dir, 'config/exclude.txt', " > ",
save.dir, 'exclude_ns.txt', sep=''))
exclude.seq <- read.table(file=paste(save.dir, 'exclude_ns.txt', sep=''))
save.dir, 'exclude_ns.txt', sep=''
exclude.seq
exclude.seq <- read.table(file=paste(save.dir, 'exclude_ns.txt', sep=''),
header=F, as.is=T)
exclude.seq
?read.ftable
?read.table
exclude.seq <- read.table(file=paste(save.dir, 'exclude_ns.txt', sep=''),
header=F, as.is=T, col.names='strain')
?read.table
exclude.seq
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f, min.len, sep=''))
## March 18, 2020
## This script is to read raw fasta file from GISAID and do quality check,
#  removes any duplicates or entries that don't meet the quality standard.
rm(list=ls())
base.dir <- '/Users/jaehee/Desktop/Coronavirus/'
setwd(base.dir)
data.dir <- './github/alignment/data/'
ns.dir <- './nextstrain/ncov/' #nextstrain cloned repo
gisaid.all.f <- paste(data.dir, 'gisaid_cov2020_sequences_all.fasta', sep='')
genbank.ref.f <- paste(data.dir, 'genbank_MN908947_ref_norm.fasta', sep='')
## Eventually, all these preprocessing will be a single bash script
#  but for now, it's a sub-optimal hybrid of bash and R... =(
## ===================================
## Do the first pass of pre-processing
## ===================================
# This part will
# 1. format the strain name the same as nextstrain
# 2. remove short strain (default cut off = 15000 following nextstrain)
# 3. remove obvious duplicates
min.len <- 15000
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f, min.len, sep=''))
min.len <- 15000
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f,
' ', min.len, sep=''))
min.len <- 15000
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f,
' ', min.len, sep=''))
min.len <- 30000
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f,
' ', min.len, sep=''))
min.len <- 15000
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f,
' ', min.len, sep=''))
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
head(ns.meta.data)
ns.meta.data[1,]
?read.delim
meta.pp1 <- read.delim(paste(data.dir, 'data/meta_cov19_pp1.txt', sep=''),
header=T, sep='\t')
meta.pp1 <- read.delim(paste(data.dir, 'meta_cov19_pp1.txt', sep=''),
header=T, sep='\t')
system(paste("bash ", data.dir, 'preprocessing.sh ', gisaid.all.f,
' ', min.len, sep=''))
getwd()
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
gisaid.all.f
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
exclude.seq
ns.meta.data[1,]
meta.pp1
meta.pp1[1:2,]
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
head(meta.pp1)
ns.meta.data <- read.delim(paste(ns.dir, 'data/metadata.tsv', sep=''),
header=T, sep='\t')
ns.meta.data[1,]
strptime
?strptime
tmp <- ns.meta.data$date[1:10]
tmp
ns.meta.data <- read.delim(paste(ns.dir, 'data/metadata.tsv', sep=''),
header=T, as.is=T, sep='\t')
tmp <- ns.meta.data$date[1:10]
tmp
meta.pp1$date
meta.pp1 <- read.delim('meta_cov19_pp1.txt', header=F, sep='\t', as.is=T,
col.names=c('strain', 'gisaid_epi_isl', 'date'))
meta.pp1$date
tmp
strptime(tmp)
strptime(tmp, format = "%Y-%m-%d")
as.POSIXct(tmp)
as.POSIXct(ns.meta.data$date)
as.POSIXct(strptime(ns.meta.data$date, format = "%Y-%m-%d"))
ns.meta.data <- ns.meta.data[ns.meta.data$host=='Human',]
dim(ns.meta.data)
as.POSIXct(strptime(ns.meta.data$date, format = "%Y-%m-%d"))
ns.meta.data <- read.delim(paste(ns.dir, 'data/metadata.tsv', sep=''),
header=T, as.is=T, sep='\t')
as.POSIXct(strptime(ns.meta.data$date, format = "%Y-%m-%d"))
tmp <- as.POSIXct(strptime(ns.meta.data$date, format = "%Y-%m-%d"))
which(is.na(tmp))
strptime('2020/01/XX')
strptime('2020/01/XX', format='%Y-%m-%d')
## ===================================
## pre-processing: second pass
## ===================================
curr.include <- 1:dim(meta.pp1)[1]
curr.include
?match
1:10 %in% c(1,3,5,9)
exclude.seq
to.include.1 <-  meta.pp1$strain %in% exclude.seq$strain
sum(to.include.1)
to.include.1 <-  !(meta.pp1$strain %in% exclude.seq$strain)
sum(to.include.1)
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
to.include.1
meta.pp1[170:180,]
to.include.2 <- meta.pp1$strain %in% ns.meta.data$strain
sum(to.include.2)
to.include.2
ns.meta.data$strain %in% meta.pp1$strain
which(!(ns.meta.data$strain %in% meta.pp1$strain))
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
sum(to.include.1)
sum(to.include.2)
t1 <- c(T,T,F)
t2 <- c(F,T,T)
t1
t2
t1 & t2
t1 && t2
to.include <- to.include.1 & to.include.2
sum(to.include)
print(paste('Final number of sequences after pre-processing is', sum(to.include)))
## ===================================
## pre-processing: second pass
## ===================================
seq.inc <- meta.pp1$strain[to.include]
length(seq.inc)
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
ns.to.include <- ns.meta.data$strain %in% seq.inc
ns.to.include
sum(ns.to.include)
stopifnot(sum(to.include) == sum(ns.to.include))
sum(to.include)
seq.inc
tmp <- seq.inc %in% ns.meta.data$strain
sum(tmp)
tmp <- c(NA, sum(to.include))
for(i in sum(to.include)) {
tmp.seq <- seq.inc[i]
tmp[i] <- which(tmp.seq == ns.meta.data$strain)
}
tm[]
tmp
sum(to.include)
tmp <- c(NA, sum(to.include))
for(i in 1:sum(to.include)) {
tmp.seq <- seq.inc[i]
tmp[i] <- which(tmp.seq == ns.meta.data$strain)
}
tmp
length(unique(tmp))
length(unique(meta.pp1$strain))
length(meta.pp1$strain)
which(duplicated(tmp))
seq.ind[323]
seq.inc[323]
seq.inc[324]
which(tmp[323]==tmp)
seq.inc[321]
seq.inc[323]
# nextstrain's exclude file, need to remove commented and empty lines
system(paste("sed '/#/d; /^$/d' ", ns.dir, 'config/exclude.txt', " > ",
data.dir, 'exclude_ns.txt', sep=''))
exclude.seq <- read.table(file=paste(data.dir, 'exclude_ns.txt', sep=''),
header=F, as.is=T, col.names='strain')
to.include.1 <-  !(meta.pp1$gisaid_epi_isl %in% exclude.seq$gisaid_epi_isl)
sum(to.include.1)
which(tmp[324]==tmp)
seq.inc[c(322, 324)]
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
exclude.seq
exclude.seq$gisaid_epi_isl
to.include.1
system(paste("sed '/#/d; /^$/d' ", ns.dir, 'config/exclude.txt', " > ",
data.dir, 'exclude_ns.txt', sep=''))
exclude.seq <- read.table(file=paste(data.dir, 'exclude_ns.txt', sep=''),
header=F, as.is=T, col.names='strain')
to.include.1 <-  !(meta.pp1$strain %in% exclude.seq$strain)
to.include.1
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
sum(to.include.1)
sum(!to.include.1)
tmp
length(tmp)
length(unique(tmp))
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
?write.table
gisaid.meta.out.f <- paste(data.dir, 'gisaid_meta_pp.txt', sep='')
write.table(ns.meta.data[ns.to.include, ], file=gisaid.meta.out.f,
quote=FALSE, row.names=FALSE, col.names=TRUE)
gisaid.meta.out.f <- paste(data.dir, 'gisaid_meta_pp.tsv', sep='')
write.table(ns.meta.data[ns.to.include, ], file=gisaid.meta.out.f,
quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
n.tot <- sum(to.include)
print(paste('Final number of sequences after pre-processing is', n.tot))
stopifnot(sum(ns.to.include) == n.tot)
which)ns.to.include
which(ns.to.include)
tmp.id <- ns.meta.data$gisaid_epi_isl[which(ns.to.include)[i]]
i<-1
tmp.id <- ns.meta.data$gisaid_epi_isl[which(ns.to.include)[i]]
tmp.id
seq.inc
fasta.ind[i] <- which(meta.pp1$gisaid_epi_isl == tmp.id)
fasta.ind <- rep(NA, n.tot)
for(i in 1:n.tot) {
tmp.id <- ns.meta.data$gisaid_epi_isl[which(ns.to.include)[i]]
fasta.ind[i] <- which(meta.pp1$gisaid_epi_isl == tmp.id)
}
fasta.ind
meta.pp1[40]
meta.pp1[40,]
ns.meta.data[which(ns.to.include)[1],]
stopifnot(any(is.na(fasta.ind)))
stopifnot(!any(is.na(fasta.ind)))
library(Biostrings)
?fasta
pp.fasta.f <- 'seq_gisaid_tmp.fasta'
fasta <- readLines(pp.fasta.f)
fasta
fasta[1]
fasta[2]
header.lines <- which(grepl("^>", fasta, fixed=FALSE))
header.lines
fasta.ind
length(header.lines)
n.tot
fasta[1:10]
header.lines[1:10]
fasta.list <- list()
for (i in 1:length(header.lines)) {
tmp.ind <- header.lines[1]:(header.lines[2] - 1)
fasta.list[[i]] <- fasta[tmp.ind]
}
fasta.list[[1]]
fasta.ind
length(fasta.list)
fasta.list.order <- fasta.list[fasta.ind]
fasta.list.order[[1]]
fasta.ind
fasta.ind[1]
ns.meta.data[which(ns.to.include)[1]]
ns.meta.data[which(ns.to.include)[1],]
meta.pp1[40,]
fasta[header.lines[40]]
fasta.list[[40]][1]
fasta.list[[1]][1]
fasta.list[[2]][1]
fasta.list <- list()
for (i in 1:length(header.lines)) {
tmp.ind <- header.lines[i]:(header.lines[i] - 1)
fasta.list[[i]] <- fasta[tmp.ind]
}
fasta.list.order <- fasta.list[fasta.ind]
fasta.list[[2]][1]
fasta.list[[1]][1]
tmp.ind
fasta.list <- list()
for (i in 1:length(header.lines)) {
tmp.ind <- header.lines[i]:(header.lines[i+1] - 1)
fasta.list[[i]] <- fasta[tmp.ind]
}
fasta.list.order <- fasta.list[fasta.ind]
i
fasta.list <- list()
for (i in 1:(length(header.lines) - 1)) {
tmp.ind <- header.lines[i]:(header.lines[i+1] - 1)
fasta.list[[i]] <- fasta[tmp.ind]
}
fasta.list.order <- fasta.list[fasta.ind]
(length(header.lines) - 1)
fasta.list[[1]][1]
fasta.list[[2]][1]
fasta.list[[1]]
fasta.list[[2]]
fasta.list.order[[1]]
fasta.list.order[[1]][1]
fasta.list.order[[1]][2]
fasta.list.order[[2]][1]
fasta.list.order[[2]][-1]
ns.meta.data[ns.to.include, ][1]
ns.meta.data[ns.to.include, ]
ns.meta.data[ns.to.include, 'length']
ns.meta.data[ns.to.include, 'length'][1]
length(fasta.list.order)
length(header.lines)
n.tot
length(fasta.list)
length(fasta.list.order)
length(fasta)
header.lines
length(header.lines)
length(fasta)
which(fasta.ind == length(header.lines))
tmp.ind\
tmp.ind
fasta.list[[i]]
fasta.list[[i]][1]
meta.pp1$strain[dim(meta.pp1)[1]]
dim(meta.pp1)\
dim(meta.pp1)
length(fasta.list)
meta.pp1$strain[dim(meta.pp1)[1]-1]
length(header.lines)
i
fasta.list <- list()
for (i in 1:length(header.lines)) {
if (i == length(header.lines)) {
tmp.ind <- header.lines[i]:length(fasta)
} else {
tmp.ind <- header.lines[i]:(header.lines[i+1] - 1)
}
fasta.list[[i]] <- fasta[tmp.ind]
}
fasta.list.order <- fasta.list[fasta.ind]
i
fasta.list[[i]][1]
meta.pp1$strain[dim(meta.pp1)[1]]
length(fasta.list.order)
fasta.list.order[[1]][1]
fasta.list.order[[362]][1]
ns.meta.data[which(ns.to.include)[i]]
ns.meta.data[which(ns.to.include)[362]]
ns.meta.data[which(ns.to.include)[n.tot]]
ns.meta.data$strain[which(ns.to.include)[n.tot]]
i<-1
tmp <- fasta.list.order[[i]]
tm
tmp
sapply(2:dim(tmp)[1], function(j) length(tmp[j]))
tmp
?sapply
sapply(2:length(tmp), function(j) length(tmp[j]))
?nchar
nchar(tmp[1])
nchar(tmp[2])
sapply(2:length(tmp), function(j) nchar(tmp[j]))
sum(sapply(2:length(tmp), function(j) nchar(tmp[j])))
stopifnot(ns.meta.data[ns.to.include, 'length'][i] == tmp.length)
tmp.length <- sum(sapply(2:length(tmp), function(j) nchar(tmp[j])))
stopifnot(ns.meta.data[ns.to.include, 'length'][i] == tmp.length)
for (i in 1:length(fasta.list.order)) {
tmp <- fasta.list.order[[i]]
tmp.length <- sum(sapply(2:length(tmp), function(j) nchar(tmp[j])))
stopifnot(ns.meta.data[ns.to.include, 'length'][i] == tmp.length)
}
tmp <- fasta.list[c(1:3)]
tmp
unlink(mtp)
unlist(tmp)
length(tmp[[1]])
length(tmp[[2]])
length(tmp[[3]])
length(unlist(tmp))
tmp2 <- unlist(tmp)
tmp2[1]
tmp2[376]
tmp <- fasta.list.order[c(1:3)]
length(tmp[[1]])
length(tmp[[2]])
length(tmp[[3]])
tmp2 <- unlist(tmp)
length(tmp2)
tmp2[1]
tmp2[375]
tmp2[748]
tmp2[749]
# Write fasta file
fileConn<-file(gisaid.fasta.out.f)
writeLines(unlist(fasta.list.order), fileConn)
close(fileConn)
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
tmp
tmp[1]
tmp[2]
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
source('~/Desktop/Coronavirus/github/alignment/R/quality_check.R')
## ===================================
## Remove temporary files
## ===================================
system("rm '*tmp*")
## ===================================
## Remove temporary files
## ===================================
system("rm *tmp*")
## ===================================
## Remove temporary files
## ===================================
system('rm *tmp*)
## ===================================
## Remove temporary files
## ===================================
system('rm *tmp*')
## ===================================
## Prepare file for MSFFT alignment
## ===================================
# Add normalized GenBank reference sequence to the GISAID fasta file
# For the GenBank sequence normalization, see alignment.md in github.
system()
## ===================================
## Remove temporary files
## ===================================
system('rm *tmp*')
## ===================================
## Prepare file for MAFFT alignment
## ===================================
# Add normalized GenBank reference sequence to the GISAID fasta file
# For the GenBank sequence normalization, see alignment.md in github.
system('cat genbank_MN908947_ref_norm.fasta gisaid_seq_pp.fasta > mafft_in.fasta')
## ===================================
## MAFFT alignment
## ===================================
# --thread -1 option automatically detects number of cores in computer.
system('mafft --thread -1 mafft_in.fasta > mafft_out.fasta')
